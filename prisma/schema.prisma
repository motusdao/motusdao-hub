// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  privyId       String?   @unique
  rolePreferred String    @default("usuario") // "usuario" | "psm"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  profile       Profile?
  journalEntries JournalEntry[]
  enrollments   Enrollment[]
  contactMessages ContactMessage[]

  @@map("users")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  displayName String?
  avatarUrl   String?
  bio         String?
  language    String   @default("es")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  userId    String?  // Optional, for logged-in users
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("contact_messages")
}

model JournalEntry {
  id        String   @id @default(cuid())
  userId    String
  content   String
  mood      String?  // "happy", "sad", "anxious", "calm", etc.
  tags      String?  // JSON string of tags
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("journal_entries")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  summary     String
  description String?
  imageUrl    String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lessons     Lesson[]
  enrollments Enrollment[]

  @@map("courses")
}

model Lesson {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  slug        String
  contentMDX  String?
  order       Int      @default(0)
  duration    Int?     // in minutes
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, slug])
  @@map("lessons")
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  progress  Int      @default(0) // percentage
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}
